/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NFS_TYPES_H
#define NFS_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class thrift_dir_entry;

class thrift_readdir_reply;

class thrift_file_info;

class thrift_timespec;

class thrift_stat;

class thrift_getattr_reply;

typedef struct _thrift_dir_entry__isset {
  _thrift_dir_entry__isset() : dir_id(false), dir_type(false), dir_name(false) {}
  bool dir_id :1;
  bool dir_type :1;
  bool dir_name :1;
} _thrift_dir_entry__isset;

class thrift_dir_entry {
 public:

  thrift_dir_entry(const thrift_dir_entry&);
  thrift_dir_entry& operator=(const thrift_dir_entry&);
  thrift_dir_entry() : dir_id(0), dir_type(0), dir_name() {
  }

  virtual ~thrift_dir_entry() throw();
  int64_t dir_id;
  int64_t dir_type;
  std::string dir_name;

  _thrift_dir_entry__isset __isset;

  void __set_dir_id(const int64_t val);

  void __set_dir_type(const int64_t val);

  void __set_dir_name(const std::string& val);

  bool operator == (const thrift_dir_entry & rhs) const
  {
    if (!(dir_id == rhs.dir_id))
      return false;
    if (!(dir_type == rhs.dir_type))
      return false;
    if (!(dir_name == rhs.dir_name))
      return false;
    return true;
  }
  bool operator != (const thrift_dir_entry &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_dir_entry & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_dir_entry &a, thrift_dir_entry &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_dir_entry& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_readdir_reply__isset {
  _thrift_readdir_reply__isset() : ret(false), dir_entries(false) {}
  bool ret :1;
  bool dir_entries :1;
} _thrift_readdir_reply__isset;

class thrift_readdir_reply {
 public:

  thrift_readdir_reply(const thrift_readdir_reply&);
  thrift_readdir_reply& operator=(const thrift_readdir_reply&);
  thrift_readdir_reply() : ret(0) {
  }

  virtual ~thrift_readdir_reply() throw();
  int32_t ret;
  std::vector<thrift_dir_entry>  dir_entries;

  _thrift_readdir_reply__isset __isset;

  void __set_ret(const int32_t val);

  void __set_dir_entries(const std::vector<thrift_dir_entry> & val);

  bool operator == (const thrift_readdir_reply & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(dir_entries == rhs.dir_entries))
      return false;
    return true;
  }
  bool operator != (const thrift_readdir_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_readdir_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_readdir_reply &a, thrift_readdir_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_readdir_reply& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_file_info__isset {
  _thrift_file_info__isset() : flags(false), fh(false) {}
  bool flags :1;
  bool fh :1;
} _thrift_file_info__isset;

class thrift_file_info {
 public:

  thrift_file_info(const thrift_file_info&);
  thrift_file_info& operator=(const thrift_file_info&);
  thrift_file_info() : flags(0), fh(0) {
  }

  virtual ~thrift_file_info() throw();
  int32_t flags;
  int64_t fh;

  _thrift_file_info__isset __isset;

  void __set_flags(const int32_t val);

  void __set_fh(const int64_t val);

  bool operator == (const thrift_file_info & rhs) const
  {
    if (!(flags == rhs.flags))
      return false;
    if (!(fh == rhs.fh))
      return false;
    return true;
  }
  bool operator != (const thrift_file_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_file_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_file_info &a, thrift_file_info &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_file_info& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_timespec__isset {
  _thrift_timespec__isset() : tv_sec(false), tv_nsec(false) {}
  bool tv_sec :1;
  bool tv_nsec :1;
} _thrift_timespec__isset;

class thrift_timespec {
 public:

  thrift_timespec(const thrift_timespec&);
  thrift_timespec& operator=(const thrift_timespec&);
  thrift_timespec() : tv_sec(0), tv_nsec(0) {
  }

  virtual ~thrift_timespec() throw();
  int64_t tv_sec;
  int64_t tv_nsec;

  _thrift_timespec__isset __isset;

  void __set_tv_sec(const int64_t val);

  void __set_tv_nsec(const int64_t val);

  bool operator == (const thrift_timespec & rhs) const
  {
    if (!(tv_sec == rhs.tv_sec))
      return false;
    if (!(tv_nsec == rhs.tv_nsec))
      return false;
    return true;
  }
  bool operator != (const thrift_timespec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_timespec & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_timespec &a, thrift_timespec &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_timespec& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_stat__isset {
  _thrift_stat__isset() : st_dev(false), st_ino(false), st_nlink(false), st_mode(false), st_uid(false), st_gid(false), __pad0(false), st_rdev(false), st_size(false), st_blksize(false), st_blocks(false), st_atim(false), st_mtim(false), st_ctim(false), __glibc_reserved0(false), __glibc_reserved1(false), __glibc_reserved2(false) {}
  bool st_dev :1;
  bool st_ino :1;
  bool st_nlink :1;
  bool st_mode :1;
  bool st_uid :1;
  bool st_gid :1;
  bool __pad0 :1;
  bool st_rdev :1;
  bool st_size :1;
  bool st_blksize :1;
  bool st_blocks :1;
  bool st_atim :1;
  bool st_mtim :1;
  bool st_ctim :1;
  bool __glibc_reserved0 :1;
  bool __glibc_reserved1 :1;
  bool __glibc_reserved2 :1;
} _thrift_stat__isset;

class thrift_stat {
 public:

  thrift_stat(const thrift_stat&);
  thrift_stat& operator=(const thrift_stat&);
  thrift_stat() : st_dev(0), st_ino(0), st_nlink(0), st_mode(0), st_uid(0), st_gid(0), __pad0(0), st_rdev(0), st_size(0), st_blksize(0), st_blocks(0), __glibc_reserved0(0), __glibc_reserved1(0), __glibc_reserved2(0) {
  }

  virtual ~thrift_stat() throw();
  int64_t st_dev;
  int64_t st_ino;
  int64_t st_nlink;
  int32_t st_mode;
  int32_t st_uid;
  int32_t st_gid;
  int32_t __pad0;
  int64_t st_rdev;
  int64_t st_size;
  int64_t st_blksize;
  int64_t st_blocks;
  thrift_timespec st_atim;
  thrift_timespec st_mtim;
  thrift_timespec st_ctim;
  int64_t __glibc_reserved0;
  int64_t __glibc_reserved1;
  int64_t __glibc_reserved2;

  _thrift_stat__isset __isset;

  void __set_st_dev(const int64_t val);

  void __set_st_ino(const int64_t val);

  void __set_st_nlink(const int64_t val);

  void __set_st_mode(const int32_t val);

  void __set_st_uid(const int32_t val);

  void __set_st_gid(const int32_t val);

  void __set___pad0(const int32_t val);

  void __set_st_rdev(const int64_t val);

  void __set_st_size(const int64_t val);

  void __set_st_blksize(const int64_t val);

  void __set_st_blocks(const int64_t val);

  void __set_st_atim(const thrift_timespec& val);

  void __set_st_mtim(const thrift_timespec& val);

  void __set_st_ctim(const thrift_timespec& val);

  void __set___glibc_reserved0(const int64_t val);

  void __set___glibc_reserved1(const int64_t val);

  void __set___glibc_reserved2(const int64_t val);

  bool operator == (const thrift_stat & rhs) const
  {
    if (!(st_dev == rhs.st_dev))
      return false;
    if (!(st_ino == rhs.st_ino))
      return false;
    if (!(st_nlink == rhs.st_nlink))
      return false;
    if (!(st_mode == rhs.st_mode))
      return false;
    if (!(st_uid == rhs.st_uid))
      return false;
    if (!(st_gid == rhs.st_gid))
      return false;
    if (!(__pad0 == rhs.__pad0))
      return false;
    if (!(st_rdev == rhs.st_rdev))
      return false;
    if (!(st_size == rhs.st_size))
      return false;
    if (!(st_blksize == rhs.st_blksize))
      return false;
    if (!(st_blocks == rhs.st_blocks))
      return false;
    if (!(st_atim == rhs.st_atim))
      return false;
    if (!(st_mtim == rhs.st_mtim))
      return false;
    if (!(st_ctim == rhs.st_ctim))
      return false;
    if (!(__glibc_reserved0 == rhs.__glibc_reserved0))
      return false;
    if (!(__glibc_reserved1 == rhs.__glibc_reserved1))
      return false;
    if (!(__glibc_reserved2 == rhs.__glibc_reserved2))
      return false;
    return true;
  }
  bool operator != (const thrift_stat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_stat & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_stat &a, thrift_stat &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_stat& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _thrift_getattr_reply__isset {
  _thrift_getattr_reply__isset() : ret(false), tstbuf(false) {}
  bool ret :1;
  bool tstbuf :1;
} _thrift_getattr_reply__isset;

class thrift_getattr_reply {
 public:

  thrift_getattr_reply(const thrift_getattr_reply&);
  thrift_getattr_reply& operator=(const thrift_getattr_reply&);
  thrift_getattr_reply() : ret(0) {
  }

  virtual ~thrift_getattr_reply() throw();
  int32_t ret;
  thrift_stat tstbuf;

  _thrift_getattr_reply__isset __isset;

  void __set_ret(const int32_t val);

  void __set_tstbuf(const thrift_stat& val);

  bool operator == (const thrift_getattr_reply & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(tstbuf == rhs.tstbuf))
      return false;
    return true;
  }
  bool operator != (const thrift_getattr_reply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const thrift_getattr_reply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(thrift_getattr_reply &a, thrift_getattr_reply &b);

inline std::ostream& operator<<(std::ostream& out, const thrift_getattr_reply& obj)
{
  obj.printTo(out);
  return out;
}



#endif
