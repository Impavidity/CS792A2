/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NFS_H
#define NFS_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NFS_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NFSIf {
 public:
  virtual ~NFSIf() {}
  virtual void nfs_readdir(thrift_readdir_reply& _return, const std::string& tpath) = 0;
  virtual int32_t nfs_mkdir(const std::string& tpath, const int32_t mode) = 0;
  virtual int32_t nfs_rmdir(const std::string& tpath) = 0;
  virtual void nfs_getattr(thrift_getattr_reply& _return, const std::string& tpath) = 0;
  virtual void ping() = 0;
};

class NFSIfFactory {
 public:
  typedef NFSIf Handler;

  virtual ~NFSIfFactory() {}

  virtual NFSIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NFSIf* /* handler */) = 0;
};

class NFSIfSingletonFactory : virtual public NFSIfFactory {
 public:
  NFSIfSingletonFactory(const boost::shared_ptr<NFSIf>& iface) : iface_(iface) {}
  virtual ~NFSIfSingletonFactory() {}

  virtual NFSIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NFSIf* /* handler */) {}

 protected:
  boost::shared_ptr<NFSIf> iface_;
};

class NFSNull : virtual public NFSIf {
 public:
  virtual ~NFSNull() {}
  void nfs_readdir(thrift_readdir_reply& /* _return */, const std::string& /* tpath */) {
    return;
  }
  int32_t nfs_mkdir(const std::string& /* tpath */, const int32_t /* mode */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t nfs_rmdir(const std::string& /* tpath */) {
    int32_t _return = 0;
    return _return;
  }
  void nfs_getattr(thrift_getattr_reply& /* _return */, const std::string& /* tpath */) {
    return;
  }
  void ping() {
    return;
  }
};

typedef struct _NFS_nfs_readdir_args__isset {
  _NFS_nfs_readdir_args__isset() : tpath(false) {}
  bool tpath :1;
} _NFS_nfs_readdir_args__isset;

class NFS_nfs_readdir_args {
 public:

  NFS_nfs_readdir_args(const NFS_nfs_readdir_args&);
  NFS_nfs_readdir_args& operator=(const NFS_nfs_readdir_args&);
  NFS_nfs_readdir_args() : tpath() {
  }

  virtual ~NFS_nfs_readdir_args() throw();
  std::string tpath;

  _NFS_nfs_readdir_args__isset __isset;

  void __set_tpath(const std::string& val);

  bool operator == (const NFS_nfs_readdir_args & rhs) const
  {
    if (!(tpath == rhs.tpath))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_readdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_readdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_nfs_readdir_pargs {
 public:


  virtual ~NFS_nfs_readdir_pargs() throw();
  const std::string* tpath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_readdir_result__isset {
  _NFS_nfs_readdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_readdir_result__isset;

class NFS_nfs_readdir_result {
 public:

  NFS_nfs_readdir_result(const NFS_nfs_readdir_result&);
  NFS_nfs_readdir_result& operator=(const NFS_nfs_readdir_result&);
  NFS_nfs_readdir_result() {
  }

  virtual ~NFS_nfs_readdir_result() throw();
  thrift_readdir_reply success;

  _NFS_nfs_readdir_result__isset __isset;

  void __set_success(const thrift_readdir_reply& val);

  bool operator == (const NFS_nfs_readdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_readdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_readdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_readdir_presult__isset {
  _NFS_nfs_readdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_readdir_presult__isset;

class NFS_nfs_readdir_presult {
 public:


  virtual ~NFS_nfs_readdir_presult() throw();
  thrift_readdir_reply* success;

  _NFS_nfs_readdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_nfs_mkdir_args__isset {
  _NFS_nfs_mkdir_args__isset() : tpath(false), mode(false) {}
  bool tpath :1;
  bool mode :1;
} _NFS_nfs_mkdir_args__isset;

class NFS_nfs_mkdir_args {
 public:

  NFS_nfs_mkdir_args(const NFS_nfs_mkdir_args&);
  NFS_nfs_mkdir_args& operator=(const NFS_nfs_mkdir_args&);
  NFS_nfs_mkdir_args() : tpath(), mode(0) {
  }

  virtual ~NFS_nfs_mkdir_args() throw();
  std::string tpath;
  int32_t mode;

  _NFS_nfs_mkdir_args__isset __isset;

  void __set_tpath(const std::string& val);

  void __set_mode(const int32_t val);

  bool operator == (const NFS_nfs_mkdir_args & rhs) const
  {
    if (!(tpath == rhs.tpath))
      return false;
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_mkdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_mkdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_nfs_mkdir_pargs {
 public:


  virtual ~NFS_nfs_mkdir_pargs() throw();
  const std::string* tpath;
  const int32_t* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_mkdir_result__isset {
  _NFS_nfs_mkdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_mkdir_result__isset;

class NFS_nfs_mkdir_result {
 public:

  NFS_nfs_mkdir_result(const NFS_nfs_mkdir_result&);
  NFS_nfs_mkdir_result& operator=(const NFS_nfs_mkdir_result&);
  NFS_nfs_mkdir_result() : success(0) {
  }

  virtual ~NFS_nfs_mkdir_result() throw();
  int32_t success;

  _NFS_nfs_mkdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NFS_nfs_mkdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_mkdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_mkdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_mkdir_presult__isset {
  _NFS_nfs_mkdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_mkdir_presult__isset;

class NFS_nfs_mkdir_presult {
 public:


  virtual ~NFS_nfs_mkdir_presult() throw();
  int32_t* success;

  _NFS_nfs_mkdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_nfs_rmdir_args__isset {
  _NFS_nfs_rmdir_args__isset() : tpath(false) {}
  bool tpath :1;
} _NFS_nfs_rmdir_args__isset;

class NFS_nfs_rmdir_args {
 public:

  NFS_nfs_rmdir_args(const NFS_nfs_rmdir_args&);
  NFS_nfs_rmdir_args& operator=(const NFS_nfs_rmdir_args&);
  NFS_nfs_rmdir_args() : tpath() {
  }

  virtual ~NFS_nfs_rmdir_args() throw();
  std::string tpath;

  _NFS_nfs_rmdir_args__isset __isset;

  void __set_tpath(const std::string& val);

  bool operator == (const NFS_nfs_rmdir_args & rhs) const
  {
    if (!(tpath == rhs.tpath))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_rmdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_rmdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_nfs_rmdir_pargs {
 public:


  virtual ~NFS_nfs_rmdir_pargs() throw();
  const std::string* tpath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_rmdir_result__isset {
  _NFS_nfs_rmdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_rmdir_result__isset;

class NFS_nfs_rmdir_result {
 public:

  NFS_nfs_rmdir_result(const NFS_nfs_rmdir_result&);
  NFS_nfs_rmdir_result& operator=(const NFS_nfs_rmdir_result&);
  NFS_nfs_rmdir_result() : success(0) {
  }

  virtual ~NFS_nfs_rmdir_result() throw();
  int32_t success;

  _NFS_nfs_rmdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NFS_nfs_rmdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_rmdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_rmdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_rmdir_presult__isset {
  _NFS_nfs_rmdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_rmdir_presult__isset;

class NFS_nfs_rmdir_presult {
 public:


  virtual ~NFS_nfs_rmdir_presult() throw();
  int32_t* success;

  _NFS_nfs_rmdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_nfs_getattr_args__isset {
  _NFS_nfs_getattr_args__isset() : tpath(false) {}
  bool tpath :1;
} _NFS_nfs_getattr_args__isset;

class NFS_nfs_getattr_args {
 public:

  NFS_nfs_getattr_args(const NFS_nfs_getattr_args&);
  NFS_nfs_getattr_args& operator=(const NFS_nfs_getattr_args&);
  NFS_nfs_getattr_args() : tpath() {
  }

  virtual ~NFS_nfs_getattr_args() throw();
  std::string tpath;

  _NFS_nfs_getattr_args__isset __isset;

  void __set_tpath(const std::string& val);

  bool operator == (const NFS_nfs_getattr_args & rhs) const
  {
    if (!(tpath == rhs.tpath))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_getattr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_getattr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_nfs_getattr_pargs {
 public:


  virtual ~NFS_nfs_getattr_pargs() throw();
  const std::string* tpath;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_getattr_result__isset {
  _NFS_nfs_getattr_result__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_getattr_result__isset;

class NFS_nfs_getattr_result {
 public:

  NFS_nfs_getattr_result(const NFS_nfs_getattr_result&);
  NFS_nfs_getattr_result& operator=(const NFS_nfs_getattr_result&);
  NFS_nfs_getattr_result() {
  }

  virtual ~NFS_nfs_getattr_result() throw();
  thrift_getattr_reply success;

  _NFS_nfs_getattr_result__isset __isset;

  void __set_success(const thrift_getattr_reply& val);

  bool operator == (const NFS_nfs_getattr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_nfs_getattr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_nfs_getattr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_nfs_getattr_presult__isset {
  _NFS_nfs_getattr_presult__isset() : success(false) {}
  bool success :1;
} _NFS_nfs_getattr_presult__isset;

class NFS_nfs_getattr_presult {
 public:


  virtual ~NFS_nfs_getattr_presult() throw();
  thrift_getattr_reply* success;

  _NFS_nfs_getattr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NFS_ping_args {
 public:

  NFS_ping_args(const NFS_ping_args&);
  NFS_ping_args& operator=(const NFS_ping_args&);
  NFS_ping_args() {
  }

  virtual ~NFS_ping_args() throw();

  bool operator == (const NFS_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NFS_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_ping_pargs {
 public:


  virtual ~NFS_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_ping_result {
 public:

  NFS_ping_result(const NFS_ping_result&);
  NFS_ping_result& operator=(const NFS_ping_result&);
  NFS_ping_result() {
  }

  virtual ~NFS_ping_result() throw();

  bool operator == (const NFS_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NFS_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_ping_presult {
 public:


  virtual ~NFS_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NFSClient : virtual public NFSIf {
 public:
  NFSClient() {}
  NFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void nfs_readdir(thrift_readdir_reply& _return, const std::string& tpath);
  void send_nfs_readdir(const std::string& tpath);
  void recv_nfs_readdir(thrift_readdir_reply& _return);
  int32_t nfs_mkdir(const std::string& tpath, const int32_t mode);
  void send_nfs_mkdir(const std::string& tpath, const int32_t mode);
  int32_t recv_nfs_mkdir();
  int32_t nfs_rmdir(const std::string& tpath);
  void send_nfs_rmdir(const std::string& tpath);
  int32_t recv_nfs_rmdir();
  void nfs_getattr(thrift_getattr_reply& _return, const std::string& tpath);
  void send_nfs_getattr(const std::string& tpath);
  void recv_nfs_getattr(thrift_getattr_reply& _return);
  void ping();
  void send_ping();
  void recv_ping();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NFSProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NFSIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NFSProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_nfs_readdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nfs_mkdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nfs_rmdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nfs_getattr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NFSProcessor(boost::shared_ptr<NFSIf> iface) :
    iface_(iface) {
    processMap_["nfs_readdir"] = &NFSProcessor::process_nfs_readdir;
    processMap_["nfs_mkdir"] = &NFSProcessor::process_nfs_mkdir;
    processMap_["nfs_rmdir"] = &NFSProcessor::process_nfs_rmdir;
    processMap_["nfs_getattr"] = &NFSProcessor::process_nfs_getattr;
    processMap_["ping"] = &NFSProcessor::process_ping;
  }

  virtual ~NFSProcessor() {}
};

class NFSProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NFSProcessorFactory(const ::boost::shared_ptr< NFSIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NFSIfFactory > handlerFactory_;
};

class NFSMultiface : virtual public NFSIf {
 public:
  NFSMultiface(std::vector<boost::shared_ptr<NFSIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NFSMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NFSIf> > ifaces_;
  NFSMultiface() {}
  void add(boost::shared_ptr<NFSIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void nfs_readdir(thrift_readdir_reply& _return, const std::string& tpath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nfs_readdir(_return, tpath);
    }
    ifaces_[i]->nfs_readdir(_return, tpath);
    return;
  }

  int32_t nfs_mkdir(const std::string& tpath, const int32_t mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nfs_mkdir(tpath, mode);
    }
    return ifaces_[i]->nfs_mkdir(tpath, mode);
  }

  int32_t nfs_rmdir(const std::string& tpath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nfs_rmdir(tpath);
    }
    return ifaces_[i]->nfs_rmdir(tpath);
  }

  void nfs_getattr(thrift_getattr_reply& _return, const std::string& tpath) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nfs_getattr(_return, tpath);
    }
    ifaces_[i]->nfs_getattr(_return, tpath);
    return;
  }

  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NFSConcurrentClient : virtual public NFSIf {
 public:
  NFSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NFSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void nfs_readdir(thrift_readdir_reply& _return, const std::string& tpath);
  int32_t send_nfs_readdir(const std::string& tpath);
  void recv_nfs_readdir(thrift_readdir_reply& _return, const int32_t seqid);
  int32_t nfs_mkdir(const std::string& tpath, const int32_t mode);
  int32_t send_nfs_mkdir(const std::string& tpath, const int32_t mode);
  int32_t recv_nfs_mkdir(const int32_t seqid);
  int32_t nfs_rmdir(const std::string& tpath);
  int32_t send_nfs_rmdir(const std::string& tpath);
  int32_t recv_nfs_rmdir(const int32_t seqid);
  void nfs_getattr(thrift_getattr_reply& _return, const std::string& tpath);
  int32_t send_nfs_getattr(const std::string& tpath);
  void recv_nfs_getattr(thrift_getattr_reply& _return, const int32_t seqid);
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
