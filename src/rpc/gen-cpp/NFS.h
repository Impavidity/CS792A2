/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NFS_H
#define NFS_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "NFS_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class NFSIf {
 public:
  virtual ~NFSIf() {}
  virtual void mount(thrift_file_handler& _return, const std::string& path) = 0;
  virtual void lookup(thrift_file_handler& _return, const thrift_file_handler& fh, const std::string& name) = 0;
  virtual void getattr(thrift_getattr_reply& _return, const thrift_file_handler& fh) = 0;
  virtual void readdir(thrift_readdir_reply& _return, const thrift_file_handler& fh) = 0;
  virtual int32_t mkdir(const thrift_file_handler& fh, const std::string& name) = 0;
  virtual int32_t rmdir(const thrift_file_handler& fh) = 0;
};

class NFSIfFactory {
 public:
  typedef NFSIf Handler;

  virtual ~NFSIfFactory() {}

  virtual NFSIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NFSIf* /* handler */) = 0;
};

class NFSIfSingletonFactory : virtual public NFSIfFactory {
 public:
  NFSIfSingletonFactory(const boost::shared_ptr<NFSIf>& iface) : iface_(iface) {}
  virtual ~NFSIfSingletonFactory() {}

  virtual NFSIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NFSIf* /* handler */) {}

 protected:
  boost::shared_ptr<NFSIf> iface_;
};

class NFSNull : virtual public NFSIf {
 public:
  virtual ~NFSNull() {}
  void mount(thrift_file_handler& /* _return */, const std::string& /* path */) {
    return;
  }
  void lookup(thrift_file_handler& /* _return */, const thrift_file_handler& /* fh */, const std::string& /* name */) {
    return;
  }
  void getattr(thrift_getattr_reply& /* _return */, const thrift_file_handler& /* fh */) {
    return;
  }
  void readdir(thrift_readdir_reply& /* _return */, const thrift_file_handler& /* fh */) {
    return;
  }
  int32_t mkdir(const thrift_file_handler& /* fh */, const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t rmdir(const thrift_file_handler& /* fh */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _NFS_mount_args__isset {
  _NFS_mount_args__isset() : path(false) {}
  bool path :1;
} _NFS_mount_args__isset;

class NFS_mount_args {
 public:

  NFS_mount_args(const NFS_mount_args&);
  NFS_mount_args& operator=(const NFS_mount_args&);
  NFS_mount_args() : path() {
  }

  virtual ~NFS_mount_args() throw();
  std::string path;

  _NFS_mount_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const NFS_mount_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const NFS_mount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_mount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_mount_pargs {
 public:


  virtual ~NFS_mount_pargs() throw();
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_mount_result__isset {
  _NFS_mount_result__isset() : success(false) {}
  bool success :1;
} _NFS_mount_result__isset;

class NFS_mount_result {
 public:

  NFS_mount_result(const NFS_mount_result&);
  NFS_mount_result& operator=(const NFS_mount_result&);
  NFS_mount_result() {
  }

  virtual ~NFS_mount_result() throw();
  thrift_file_handler success;

  _NFS_mount_result__isset __isset;

  void __set_success(const thrift_file_handler& val);

  bool operator == (const NFS_mount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_mount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_mount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_mount_presult__isset {
  _NFS_mount_presult__isset() : success(false) {}
  bool success :1;
} _NFS_mount_presult__isset;

class NFS_mount_presult {
 public:


  virtual ~NFS_mount_presult() throw();
  thrift_file_handler* success;

  _NFS_mount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_lookup_args__isset {
  _NFS_lookup_args__isset() : fh(false), name(false) {}
  bool fh :1;
  bool name :1;
} _NFS_lookup_args__isset;

class NFS_lookup_args {
 public:

  NFS_lookup_args(const NFS_lookup_args&);
  NFS_lookup_args& operator=(const NFS_lookup_args&);
  NFS_lookup_args() : name() {
  }

  virtual ~NFS_lookup_args() throw();
  thrift_file_handler fh;
  std::string name;

  _NFS_lookup_args__isset __isset;

  void __set_fh(const thrift_file_handler& val);

  void __set_name(const std::string& val);

  bool operator == (const NFS_lookup_args & rhs) const
  {
    if (!(fh == rhs.fh))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const NFS_lookup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_lookup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_lookup_pargs {
 public:


  virtual ~NFS_lookup_pargs() throw();
  const thrift_file_handler* fh;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_lookup_result__isset {
  _NFS_lookup_result__isset() : success(false) {}
  bool success :1;
} _NFS_lookup_result__isset;

class NFS_lookup_result {
 public:

  NFS_lookup_result(const NFS_lookup_result&);
  NFS_lookup_result& operator=(const NFS_lookup_result&);
  NFS_lookup_result() {
  }

  virtual ~NFS_lookup_result() throw();
  thrift_file_handler success;

  _NFS_lookup_result__isset __isset;

  void __set_success(const thrift_file_handler& val);

  bool operator == (const NFS_lookup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_lookup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_lookup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_lookup_presult__isset {
  _NFS_lookup_presult__isset() : success(false) {}
  bool success :1;
} _NFS_lookup_presult__isset;

class NFS_lookup_presult {
 public:


  virtual ~NFS_lookup_presult() throw();
  thrift_file_handler* success;

  _NFS_lookup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_getattr_args__isset {
  _NFS_getattr_args__isset() : fh(false) {}
  bool fh :1;
} _NFS_getattr_args__isset;

class NFS_getattr_args {
 public:

  NFS_getattr_args(const NFS_getattr_args&);
  NFS_getattr_args& operator=(const NFS_getattr_args&);
  NFS_getattr_args() {
  }

  virtual ~NFS_getattr_args() throw();
  thrift_file_handler fh;

  _NFS_getattr_args__isset __isset;

  void __set_fh(const thrift_file_handler& val);

  bool operator == (const NFS_getattr_args & rhs) const
  {
    if (!(fh == rhs.fh))
      return false;
    return true;
  }
  bool operator != (const NFS_getattr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_getattr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_getattr_pargs {
 public:


  virtual ~NFS_getattr_pargs() throw();
  const thrift_file_handler* fh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_getattr_result__isset {
  _NFS_getattr_result__isset() : success(false) {}
  bool success :1;
} _NFS_getattr_result__isset;

class NFS_getattr_result {
 public:

  NFS_getattr_result(const NFS_getattr_result&);
  NFS_getattr_result& operator=(const NFS_getattr_result&);
  NFS_getattr_result() {
  }

  virtual ~NFS_getattr_result() throw();
  thrift_getattr_reply success;

  _NFS_getattr_result__isset __isset;

  void __set_success(const thrift_getattr_reply& val);

  bool operator == (const NFS_getattr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_getattr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_getattr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_getattr_presult__isset {
  _NFS_getattr_presult__isset() : success(false) {}
  bool success :1;
} _NFS_getattr_presult__isset;

class NFS_getattr_presult {
 public:


  virtual ~NFS_getattr_presult() throw();
  thrift_getattr_reply* success;

  _NFS_getattr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_readdir_args__isset {
  _NFS_readdir_args__isset() : fh(false) {}
  bool fh :1;
} _NFS_readdir_args__isset;

class NFS_readdir_args {
 public:

  NFS_readdir_args(const NFS_readdir_args&);
  NFS_readdir_args& operator=(const NFS_readdir_args&);
  NFS_readdir_args() {
  }

  virtual ~NFS_readdir_args() throw();
  thrift_file_handler fh;

  _NFS_readdir_args__isset __isset;

  void __set_fh(const thrift_file_handler& val);

  bool operator == (const NFS_readdir_args & rhs) const
  {
    if (!(fh == rhs.fh))
      return false;
    return true;
  }
  bool operator != (const NFS_readdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_readdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_readdir_pargs {
 public:


  virtual ~NFS_readdir_pargs() throw();
  const thrift_file_handler* fh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_readdir_result__isset {
  _NFS_readdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_readdir_result__isset;

class NFS_readdir_result {
 public:

  NFS_readdir_result(const NFS_readdir_result&);
  NFS_readdir_result& operator=(const NFS_readdir_result&);
  NFS_readdir_result() {
  }

  virtual ~NFS_readdir_result() throw();
  thrift_readdir_reply success;

  _NFS_readdir_result__isset __isset;

  void __set_success(const thrift_readdir_reply& val);

  bool operator == (const NFS_readdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_readdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_readdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_readdir_presult__isset {
  _NFS_readdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_readdir_presult__isset;

class NFS_readdir_presult {
 public:


  virtual ~NFS_readdir_presult() throw();
  thrift_readdir_reply* success;

  _NFS_readdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_mkdir_args__isset {
  _NFS_mkdir_args__isset() : fh(false), name(false) {}
  bool fh :1;
  bool name :1;
} _NFS_mkdir_args__isset;

class NFS_mkdir_args {
 public:

  NFS_mkdir_args(const NFS_mkdir_args&);
  NFS_mkdir_args& operator=(const NFS_mkdir_args&);
  NFS_mkdir_args() : name() {
  }

  virtual ~NFS_mkdir_args() throw();
  thrift_file_handler fh;
  std::string name;

  _NFS_mkdir_args__isset __isset;

  void __set_fh(const thrift_file_handler& val);

  void __set_name(const std::string& val);

  bool operator == (const NFS_mkdir_args & rhs) const
  {
    if (!(fh == rhs.fh))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const NFS_mkdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_mkdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_mkdir_pargs {
 public:


  virtual ~NFS_mkdir_pargs() throw();
  const thrift_file_handler* fh;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_mkdir_result__isset {
  _NFS_mkdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_mkdir_result__isset;

class NFS_mkdir_result {
 public:

  NFS_mkdir_result(const NFS_mkdir_result&);
  NFS_mkdir_result& operator=(const NFS_mkdir_result&);
  NFS_mkdir_result() : success(0) {
  }

  virtual ~NFS_mkdir_result() throw();
  int32_t success;

  _NFS_mkdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NFS_mkdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_mkdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_mkdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_mkdir_presult__isset {
  _NFS_mkdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_mkdir_presult__isset;

class NFS_mkdir_presult {
 public:


  virtual ~NFS_mkdir_presult() throw();
  int32_t* success;

  _NFS_mkdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NFS_rmdir_args__isset {
  _NFS_rmdir_args__isset() : fh(false) {}
  bool fh :1;
} _NFS_rmdir_args__isset;

class NFS_rmdir_args {
 public:

  NFS_rmdir_args(const NFS_rmdir_args&);
  NFS_rmdir_args& operator=(const NFS_rmdir_args&);
  NFS_rmdir_args() {
  }

  virtual ~NFS_rmdir_args() throw();
  thrift_file_handler fh;

  _NFS_rmdir_args__isset __isset;

  void __set_fh(const thrift_file_handler& val);

  bool operator == (const NFS_rmdir_args & rhs) const
  {
    if (!(fh == rhs.fh))
      return false;
    return true;
  }
  bool operator != (const NFS_rmdir_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_rmdir_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NFS_rmdir_pargs {
 public:


  virtual ~NFS_rmdir_pargs() throw();
  const thrift_file_handler* fh;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_rmdir_result__isset {
  _NFS_rmdir_result__isset() : success(false) {}
  bool success :1;
} _NFS_rmdir_result__isset;

class NFS_rmdir_result {
 public:

  NFS_rmdir_result(const NFS_rmdir_result&);
  NFS_rmdir_result& operator=(const NFS_rmdir_result&);
  NFS_rmdir_result() : success(0) {
  }

  virtual ~NFS_rmdir_result() throw();
  int32_t success;

  _NFS_rmdir_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const NFS_rmdir_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NFS_rmdir_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NFS_rmdir_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NFS_rmdir_presult__isset {
  _NFS_rmdir_presult__isset() : success(false) {}
  bool success :1;
} _NFS_rmdir_presult__isset;

class NFS_rmdir_presult {
 public:


  virtual ~NFS_rmdir_presult() throw();
  int32_t* success;

  _NFS_rmdir_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NFSClient : virtual public NFSIf {
 public:
  NFSClient() {}
  NFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NFSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void mount(thrift_file_handler& _return, const std::string& path);
  void send_mount(const std::string& path);
  void recv_mount(thrift_file_handler& _return);
  void lookup(thrift_file_handler& _return, const thrift_file_handler& fh, const std::string& name);
  void send_lookup(const thrift_file_handler& fh, const std::string& name);
  void recv_lookup(thrift_file_handler& _return);
  void getattr(thrift_getattr_reply& _return, const thrift_file_handler& fh);
  void send_getattr(const thrift_file_handler& fh);
  void recv_getattr(thrift_getattr_reply& _return);
  void readdir(thrift_readdir_reply& _return, const thrift_file_handler& fh);
  void send_readdir(const thrift_file_handler& fh);
  void recv_readdir(thrift_readdir_reply& _return);
  int32_t mkdir(const thrift_file_handler& fh, const std::string& name);
  void send_mkdir(const thrift_file_handler& fh, const std::string& name);
  int32_t recv_mkdir();
  int32_t rmdir(const thrift_file_handler& fh);
  void send_rmdir(const thrift_file_handler& fh);
  int32_t recv_rmdir();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NFSProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NFSIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NFSProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_mount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lookup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getattr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mkdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rmdir(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NFSProcessor(boost::shared_ptr<NFSIf> iface) :
    iface_(iface) {
    processMap_["mount"] = &NFSProcessor::process_mount;
    processMap_["lookup"] = &NFSProcessor::process_lookup;
    processMap_["getattr"] = &NFSProcessor::process_getattr;
    processMap_["readdir"] = &NFSProcessor::process_readdir;
    processMap_["mkdir"] = &NFSProcessor::process_mkdir;
    processMap_["rmdir"] = &NFSProcessor::process_rmdir;
  }

  virtual ~NFSProcessor() {}
};

class NFSProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NFSProcessorFactory(const ::boost::shared_ptr< NFSIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NFSIfFactory > handlerFactory_;
};

class NFSMultiface : virtual public NFSIf {
 public:
  NFSMultiface(std::vector<boost::shared_ptr<NFSIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NFSMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NFSIf> > ifaces_;
  NFSMultiface() {}
  void add(boost::shared_ptr<NFSIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void mount(thrift_file_handler& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mount(_return, path);
    }
    ifaces_[i]->mount(_return, path);
    return;
  }

  void lookup(thrift_file_handler& _return, const thrift_file_handler& fh, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lookup(_return, fh, name);
    }
    ifaces_[i]->lookup(_return, fh, name);
    return;
  }

  void getattr(thrift_getattr_reply& _return, const thrift_file_handler& fh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getattr(_return, fh);
    }
    ifaces_[i]->getattr(_return, fh);
    return;
  }

  void readdir(thrift_readdir_reply& _return, const thrift_file_handler& fh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readdir(_return, fh);
    }
    ifaces_[i]->readdir(_return, fh);
    return;
  }

  int32_t mkdir(const thrift_file_handler& fh, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mkdir(fh, name);
    }
    return ifaces_[i]->mkdir(fh, name);
  }

  int32_t rmdir(const thrift_file_handler& fh) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rmdir(fh);
    }
    return ifaces_[i]->rmdir(fh);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class NFSConcurrentClient : virtual public NFSIf {
 public:
  NFSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  NFSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void mount(thrift_file_handler& _return, const std::string& path);
  int32_t send_mount(const std::string& path);
  void recv_mount(thrift_file_handler& _return, const int32_t seqid);
  void lookup(thrift_file_handler& _return, const thrift_file_handler& fh, const std::string& name);
  int32_t send_lookup(const thrift_file_handler& fh, const std::string& name);
  void recv_lookup(thrift_file_handler& _return, const int32_t seqid);
  void getattr(thrift_getattr_reply& _return, const thrift_file_handler& fh);
  int32_t send_getattr(const thrift_file_handler& fh);
  void recv_getattr(thrift_getattr_reply& _return, const int32_t seqid);
  void readdir(thrift_readdir_reply& _return, const thrift_file_handler& fh);
  int32_t send_readdir(const thrift_file_handler& fh);
  void recv_readdir(thrift_readdir_reply& _return, const int32_t seqid);
  int32_t mkdir(const thrift_file_handler& fh, const std::string& name);
  int32_t send_mkdir(const thrift_file_handler& fh, const std::string& name);
  int32_t recv_mkdir(const int32_t seqid);
  int32_t rmdir(const thrift_file_handler& fh);
  int32_t send_rmdir(const thrift_file_handler& fh);
  int32_t recv_rmdir(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
