/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "NFS_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




thrift_dir_entry::~thrift_dir_entry() throw() {
}


void thrift_dir_entry::__set_dir_id(const int64_t val) {
  this->dir_id = val;
}

void thrift_dir_entry::__set_dir_type(const int64_t val) {
  this->dir_type = val;
}

void thrift_dir_entry::__set_dir_name(const std::string& val) {
  this->dir_name = val;
}

uint32_t thrift_dir_entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_id);
          this->__isset.dir_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dir_type);
          this->__isset.dir_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dir_name);
          this->__isset.dir_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_dir_entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_dir_entry");

  xfer += oprot->writeFieldBegin("dir_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->dir_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_type", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->dir_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dir_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_dir_entry &a, thrift_dir_entry &b) {
  using ::std::swap;
  swap(a.dir_id, b.dir_id);
  swap(a.dir_type, b.dir_type);
  swap(a.dir_name, b.dir_name);
  swap(a.__isset, b.__isset);
}

thrift_dir_entry::thrift_dir_entry(const thrift_dir_entry& other0) {
  dir_id = other0.dir_id;
  dir_type = other0.dir_type;
  dir_name = other0.dir_name;
  __isset = other0.__isset;
}
thrift_dir_entry& thrift_dir_entry::operator=(const thrift_dir_entry& other1) {
  dir_id = other1.dir_id;
  dir_type = other1.dir_type;
  dir_name = other1.dir_name;
  __isset = other1.__isset;
  return *this;
}
void thrift_dir_entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_dir_entry(";
  out << "dir_id=" << to_string(dir_id);
  out << ", " << "dir_type=" << to_string(dir_type);
  out << ", " << "dir_name=" << to_string(dir_name);
  out << ")";
}


thrift_readdir_reply::~thrift_readdir_reply() throw() {
}


void thrift_readdir_reply::__set_ret(const int32_t val) {
  this->ret = val;
}

void thrift_readdir_reply::__set_dir_entries(const std::vector<thrift_dir_entry> & val) {
  this->dir_entries = val;
}

uint32_t thrift_readdir_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dir_entries.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->dir_entries.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->dir_entries[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dir_entries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_readdir_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_readdir_reply");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dir_entries", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dir_entries.size()));
    std::vector<thrift_dir_entry> ::const_iterator _iter7;
    for (_iter7 = this->dir_entries.begin(); _iter7 != this->dir_entries.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_readdir_reply &a, thrift_readdir_reply &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.dir_entries, b.dir_entries);
  swap(a.__isset, b.__isset);
}

thrift_readdir_reply::thrift_readdir_reply(const thrift_readdir_reply& other8) {
  ret = other8.ret;
  dir_entries = other8.dir_entries;
  __isset = other8.__isset;
}
thrift_readdir_reply& thrift_readdir_reply::operator=(const thrift_readdir_reply& other9) {
  ret = other9.ret;
  dir_entries = other9.dir_entries;
  __isset = other9.__isset;
  return *this;
}
void thrift_readdir_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_readdir_reply(";
  out << "ret=" << to_string(ret);
  out << ", " << "dir_entries=" << to_string(dir_entries);
  out << ")";
}


thrift_file_info::~thrift_file_info() throw() {
}


void thrift_file_info::__set_flags(const int32_t val) {
  this->flags = val;
}

void thrift_file_info::__set_fh(const int64_t val) {
  this->fh = val;
}

uint32_t thrift_file_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fh);
          this->__isset.fh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_file_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_file_info");

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fh", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->fh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_file_info &a, thrift_file_info &b) {
  using ::std::swap;
  swap(a.flags, b.flags);
  swap(a.fh, b.fh);
  swap(a.__isset, b.__isset);
}

thrift_file_info::thrift_file_info(const thrift_file_info& other10) {
  flags = other10.flags;
  fh = other10.fh;
  __isset = other10.__isset;
}
thrift_file_info& thrift_file_info::operator=(const thrift_file_info& other11) {
  flags = other11.flags;
  fh = other11.fh;
  __isset = other11.__isset;
  return *this;
}
void thrift_file_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_file_info(";
  out << "flags=" << to_string(flags);
  out << ", " << "fh=" << to_string(fh);
  out << ")";
}


thrift_timespec::~thrift_timespec() throw() {
}


void thrift_timespec::__set_tv_sec(const int64_t val) {
  this->tv_sec = val;
}

void thrift_timespec::__set_tv_nsec(const int64_t val) {
  this->tv_nsec = val;
}

uint32_t thrift_timespec::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_sec);
          this->__isset.tv_sec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tv_nsec);
          this->__isset.tv_nsec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_timespec::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_timespec");

  xfer += oprot->writeFieldBegin("tv_sec", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tv_sec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tv_nsec", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->tv_nsec);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_timespec &a, thrift_timespec &b) {
  using ::std::swap;
  swap(a.tv_sec, b.tv_sec);
  swap(a.tv_nsec, b.tv_nsec);
  swap(a.__isset, b.__isset);
}

thrift_timespec::thrift_timespec(const thrift_timespec& other12) {
  tv_sec = other12.tv_sec;
  tv_nsec = other12.tv_nsec;
  __isset = other12.__isset;
}
thrift_timespec& thrift_timespec::operator=(const thrift_timespec& other13) {
  tv_sec = other13.tv_sec;
  tv_nsec = other13.tv_nsec;
  __isset = other13.__isset;
  return *this;
}
void thrift_timespec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_timespec(";
  out << "tv_sec=" << to_string(tv_sec);
  out << ", " << "tv_nsec=" << to_string(tv_nsec);
  out << ")";
}


thrift_stat::~thrift_stat() throw() {
}


void thrift_stat::__set_st_dev(const int64_t val) {
  this->st_dev = val;
}

void thrift_stat::__set_st_ino(const int64_t val) {
  this->st_ino = val;
}

void thrift_stat::__set_st_nlink(const int64_t val) {
  this->st_nlink = val;
}

void thrift_stat::__set_st_mode(const int32_t val) {
  this->st_mode = val;
}

void thrift_stat::__set_st_uid(const int32_t val) {
  this->st_uid = val;
}

void thrift_stat::__set_st_gid(const int32_t val) {
  this->st_gid = val;
}

void thrift_stat::__set___pad0(const int32_t val) {
  this->__pad0 = val;
}

void thrift_stat::__set_st_rdev(const int64_t val) {
  this->st_rdev = val;
}

void thrift_stat::__set_st_size(const int64_t val) {
  this->st_size = val;
}

void thrift_stat::__set_st_blksize(const int64_t val) {
  this->st_blksize = val;
}

void thrift_stat::__set_st_blocks(const int64_t val) {
  this->st_blocks = val;
}

void thrift_stat::__set_st_atim(const thrift_timespec& val) {
  this->st_atim = val;
}

void thrift_stat::__set_st_mtim(const thrift_timespec& val) {
  this->st_mtim = val;
}

void thrift_stat::__set_st_ctim(const thrift_timespec& val) {
  this->st_ctim = val;
}

void thrift_stat::__set___glibc_reserved0(const int64_t val) {
  this->__glibc_reserved0 = val;
}

void thrift_stat::__set___glibc_reserved1(const int64_t val) {
  this->__glibc_reserved1 = val;
}

void thrift_stat::__set___glibc_reserved2(const int64_t val) {
  this->__glibc_reserved2 = val;
}

uint32_t thrift_stat::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_dev);
          this->__isset.st_dev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_ino);
          this->__isset.st_ino = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_nlink);
          this->__isset.st_nlink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_mode);
          this->__isset.st_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_uid);
          this->__isset.st_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->st_gid);
          this->__isset.st_gid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->__pad0);
          this->__isset.__pad0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_rdev);
          this->__isset.st_rdev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_size);
          this->__isset.st_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blksize);
          this->__isset.st_blksize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->st_blocks);
          this->__isset.st_blocks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_atim.read(iprot);
          this->__isset.st_atim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_mtim.read(iprot);
          this->__isset.st_mtim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->st_ctim.read(iprot);
          this->__isset.st_ctim = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved0);
          this->__isset.__glibc_reserved0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved1);
          this->__isset.__glibc_reserved1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->__glibc_reserved2);
          this->__isset.__glibc_reserved2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_stat::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_stat");

  xfer += oprot->writeFieldBegin("st_dev", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->st_dev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ino", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->st_ino);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_nlink", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->st_nlink);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mode", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->st_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_uid", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->st_uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_gid", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->st_gid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__pad0", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->__pad0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_rdev", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->st_rdev);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_size", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->st_size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blksize", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->st_blksize);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_blocks", ::apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->st_blocks);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_atim", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->st_atim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_mtim", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->st_mtim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("st_ctim", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->st_ctim.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved0", ::apache::thrift::protocol::T_I64, 15);
  xfer += oprot->writeI64(this->__glibc_reserved0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved1", ::apache::thrift::protocol::T_I64, 16);
  xfer += oprot->writeI64(this->__glibc_reserved1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__glibc_reserved2", ::apache::thrift::protocol::T_I64, 17);
  xfer += oprot->writeI64(this->__glibc_reserved2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_stat &a, thrift_stat &b) {
  using ::std::swap;
  swap(a.st_dev, b.st_dev);
  swap(a.st_ino, b.st_ino);
  swap(a.st_nlink, b.st_nlink);
  swap(a.st_mode, b.st_mode);
  swap(a.st_uid, b.st_uid);
  swap(a.st_gid, b.st_gid);
  swap(a.__pad0, b.__pad0);
  swap(a.st_rdev, b.st_rdev);
  swap(a.st_size, b.st_size);
  swap(a.st_blksize, b.st_blksize);
  swap(a.st_blocks, b.st_blocks);
  swap(a.st_atim, b.st_atim);
  swap(a.st_mtim, b.st_mtim);
  swap(a.st_ctim, b.st_ctim);
  swap(a.__glibc_reserved0, b.__glibc_reserved0);
  swap(a.__glibc_reserved1, b.__glibc_reserved1);
  swap(a.__glibc_reserved2, b.__glibc_reserved2);
  swap(a.__isset, b.__isset);
}

thrift_stat::thrift_stat(const thrift_stat& other14) {
  st_dev = other14.st_dev;
  st_ino = other14.st_ino;
  st_nlink = other14.st_nlink;
  st_mode = other14.st_mode;
  st_uid = other14.st_uid;
  st_gid = other14.st_gid;
  __pad0 = other14.__pad0;
  st_rdev = other14.st_rdev;
  st_size = other14.st_size;
  st_blksize = other14.st_blksize;
  st_blocks = other14.st_blocks;
  st_atim = other14.st_atim;
  st_mtim = other14.st_mtim;
  st_ctim = other14.st_ctim;
  __glibc_reserved0 = other14.__glibc_reserved0;
  __glibc_reserved1 = other14.__glibc_reserved1;
  __glibc_reserved2 = other14.__glibc_reserved2;
  __isset = other14.__isset;
}
thrift_stat& thrift_stat::operator=(const thrift_stat& other15) {
  st_dev = other15.st_dev;
  st_ino = other15.st_ino;
  st_nlink = other15.st_nlink;
  st_mode = other15.st_mode;
  st_uid = other15.st_uid;
  st_gid = other15.st_gid;
  __pad0 = other15.__pad0;
  st_rdev = other15.st_rdev;
  st_size = other15.st_size;
  st_blksize = other15.st_blksize;
  st_blocks = other15.st_blocks;
  st_atim = other15.st_atim;
  st_mtim = other15.st_mtim;
  st_ctim = other15.st_ctim;
  __glibc_reserved0 = other15.__glibc_reserved0;
  __glibc_reserved1 = other15.__glibc_reserved1;
  __glibc_reserved2 = other15.__glibc_reserved2;
  __isset = other15.__isset;
  return *this;
}
void thrift_stat::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_stat(";
  out << "st_dev=" << to_string(st_dev);
  out << ", " << "st_ino=" << to_string(st_ino);
  out << ", " << "st_nlink=" << to_string(st_nlink);
  out << ", " << "st_mode=" << to_string(st_mode);
  out << ", " << "st_uid=" << to_string(st_uid);
  out << ", " << "st_gid=" << to_string(st_gid);
  out << ", " << "__pad0=" << to_string(__pad0);
  out << ", " << "st_rdev=" << to_string(st_rdev);
  out << ", " << "st_size=" << to_string(st_size);
  out << ", " << "st_blksize=" << to_string(st_blksize);
  out << ", " << "st_blocks=" << to_string(st_blocks);
  out << ", " << "st_atim=" << to_string(st_atim);
  out << ", " << "st_mtim=" << to_string(st_mtim);
  out << ", " << "st_ctim=" << to_string(st_ctim);
  out << ", " << "__glibc_reserved0=" << to_string(__glibc_reserved0);
  out << ", " << "__glibc_reserved1=" << to_string(__glibc_reserved1);
  out << ", " << "__glibc_reserved2=" << to_string(__glibc_reserved2);
  out << ")";
}


thrift_getattr_reply::~thrift_getattr_reply() throw() {
}


void thrift_getattr_reply::__set_ret(const int32_t val) {
  this->ret = val;
}

void thrift_getattr_reply::__set_tstbuf(const thrift_stat& val) {
  this->tstbuf = val;
}

uint32_t thrift_getattr_reply::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tstbuf.read(iprot);
          this->__isset.tstbuf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_getattr_reply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_getattr_reply");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tstbuf", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->tstbuf.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_getattr_reply &a, thrift_getattr_reply &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.tstbuf, b.tstbuf);
  swap(a.__isset, b.__isset);
}

thrift_getattr_reply::thrift_getattr_reply(const thrift_getattr_reply& other16) {
  ret = other16.ret;
  tstbuf = other16.tstbuf;
  __isset = other16.__isset;
}
thrift_getattr_reply& thrift_getattr_reply::operator=(const thrift_getattr_reply& other17) {
  ret = other17.ret;
  tstbuf = other17.tstbuf;
  __isset = other17.__isset;
  return *this;
}
void thrift_getattr_reply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_getattr_reply(";
  out << "ret=" << to_string(ret);
  out << ", " << "tstbuf=" << to_string(tstbuf);
  out << ")";
}


thrift_file_handler::~thrift_file_handler() throw() {
}


void thrift_file_handler::__set_system_id(const int32_t val) {
  this->system_id = val;
}

void thrift_file_handler::__set_inode(const int64_t val) {
  this->inode = val;
}

void thrift_file_handler::__set_generation_number(const int64_t val) {
  this->generation_number = val;
}

uint32_t thrift_file_handler::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->system_id);
          this->__isset.system_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->inode);
          this->__isset.inode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->generation_number);
          this->__isset.generation_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t thrift_file_handler::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("thrift_file_handler");

  xfer += oprot->writeFieldBegin("system_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->system_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("inode", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->inode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("generation_number", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->generation_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(thrift_file_handler &a, thrift_file_handler &b) {
  using ::std::swap;
  swap(a.system_id, b.system_id);
  swap(a.inode, b.inode);
  swap(a.generation_number, b.generation_number);
  swap(a.__isset, b.__isset);
}

thrift_file_handler::thrift_file_handler(const thrift_file_handler& other18) {
  system_id = other18.system_id;
  inode = other18.inode;
  generation_number = other18.generation_number;
  __isset = other18.__isset;
}
thrift_file_handler& thrift_file_handler::operator=(const thrift_file_handler& other19) {
  system_id = other19.system_id;
  inode = other19.inode;
  generation_number = other19.generation_number;
  __isset = other19.__isset;
  return *this;
}
void thrift_file_handler::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "thrift_file_handler(";
  out << "system_id=" << to_string(system_id);
  out << ", " << "inode=" << to_string(inode);
  out << ", " << "generation_number=" << to_string(generation_number);
  out << ")";
}


